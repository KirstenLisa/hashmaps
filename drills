
const HashMap = require('./hashmap');
const HashMapChain = require('./hash-separate-chain');

function main() {
    
    const lotr = new HashMapChain();
    HashMap.MAX_LOAD_RATIO = 0.5;
    HashMap.SIZE_RATIO = 3;

    lotr.set('Hobbit', 'Bilbo');
    lotr.set('Hobbit', 'Frodo');
    lotr.set('Wizard', 'Gandolf');
    lotr.set('Human', 'Aragorn');
    lotr.set('Elf', 'Legolas');
    lotr.set('Maiar', 'The Necromancer');
    lotr.set('Maiar', 'Sauron');
    lotr.set('RingBearer', 'Gollum');
    lotr.set('LadyOfLight', 'Galadriel');
    lotr.set('HalfElven', 'Arwen');
    lotr.set('Ent', 'Treebeard');
    return lotr; 
    }
    
    function removeDuplicates(str) {
    let map = new HashMap();
    let newStr = '';
    for (let i = 0; i < str.length; i++) {
        map.set(str[i], str[i]);
        if (!newStr.includes(str[i])) {
            newStr += map.get(str[i]);
        }
    }

    return newStr;
}

function palindrome(str) {
    let map = new HashMap();
    let oddNumberStr = 0;

    for (let i = 0; i < str.length; i++) {
        if (map.get(str[i]) === undefined) {
            map.set(str[i], 1);
        } else {
            let char = map.get(str[i]);
            map.set(str[i], char+=1);
        }
    }
    
       for (let i = 0; i < map.length; i++) {
        if (map.get(str[i]) % 2 !==0) {
            oddNumberStr++;
            console.log('odd number', oddNumberStr);
        }
        if (oddNumberStr > 1) {
            return false;
        }
    }
    return true;
}

function anagramGroups(list) {
    const map = new Map();

    list.forEach((word) => {
        let sorted = alphabetize(word);

        if (map.has(sorted)) {
            map.get(sorted).push(word);
        } else {
            map.set(sorted, [word]);
        }
    });

    return [...map.values()];
};

const alphabetize = word => {
    let alphebtized = word.split('').sort().join('');
    return alphebtized;
};

let east = ['east', 'cars', 'acre', 'arcs', 'teas', 'eats', 'race'];

